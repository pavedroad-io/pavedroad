" This vimrc works for vi, vim, and nvim
"
" Plugins installed have been curated for golang development with git.
" Recommended settings and mappings below have been curated as well.
" Alternate settings and mappings below can be uncommented or edited.
" The default settings are shown in the comments for comparison.

if &compatible
  echom "nocompatible mode must be set for plugins to work"
  finish
endif

" Get all of the plugins
source ~/.pr_vimrc_plug

"-----------------------
" airblade/vim-gitgutter
"-----------------------
" https://github.com/airblade/vim-gitgutter

" Default: Set whether plugin provides mappings = 1
let g:gitgutter_map_keys = 0

" Default: Set maximum signs to show in a buffer = 500
let g:gitgutter_max_signs = 1000

" Default: Set extra arguments to pass to git-diff = empty
let g:gitgutter_diff_args = '--ignore-space-at-eol'

nnoremap <S-F5> :GitGutterToggle<CR>
nnoremap <S-F6> :GitGutterSignsToggle<CR>
nnoremap <S-F7> :GitGutterLineHighlightsToggle<CR>
nmap <silent> ]h :GitGutterNextHunk<CR>
nmap <silent> [h :GitGutterPrevHunk<CR>
nnoremap <silent> <leader>ggr :GitGutterRevertHunk<CR>
nnoremap <silent> <leader>ggp :GitGutterPreviewHunk<CR>
nnoremap <silent> <leader>gga :GitGutterAll<CR>

"------------------
" ervandew/supertab
"------------------
" https://github.com/ervandew/supertab

" Default: Set supertab completion type = '<c-p>'
let g:SuperTabDefaultCompletionType = "context"

" Default: Set omni completion precedence = ['&completefunc', '&omnifunc'] 
let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']

"-------------
" fatih/vim-go
"-------------
" https://github.com/fatih/vim-go

" Default: Define snippet engine to use = "automatic"
" Available settings: automatic, ultisnips, neosnippet, minisnip
let g:go_snippet_engine = "ultisnips"

" Default: Set formatting tool = "gopls"
" let g:go_fmt_command = "goimports"

" Default: Show a location list when gofmt fails = 0
let g:go_fmt_fail_silently = 1

" Default: Set type of list to use for command outputs = empty
let g:go_list_type = "quickfix"

" To revert to defaults prior to gopls uncomment next two settings
" Using goimports extends gofmt functionality
" Default: Set the command to be used for :GoDef = 'gopls'
" let g:go_def_mode='guru'
" Default: Set the command to be used for :GoInfo = 'gopls'
" let g:go_info_mode='guru'
"
" The test timeout can be changed with the next setting
" Default: Set the timeout of :GoTest = '10s'
" let g:go_test_timeout = '20s'

" Use :GoSameIdsToggle to toggle this setting or change the setting
" Default: Highlight all instances of identifier under cursor = 0
" let g:go_auto_sameids = 1

" Default: Show the type info (:GoInfo) for word under cursor = 0
let g:go_auto_type_info = 1

" Default: Echo info about commands like :GoBuild, :GoTest, etc = 1
let g:go_echo_command_info = 0

" Default: Specify linters for :GoMetaLinter = ['all']
" Available settings: vet, golint, revive, errcheck, gosec
let g:go_metalinter_enabled = ['vet', 'revive', 'errcheck', 'gosec']

" Default: Automatically execute :GoMetaLinter on save = 0
" let g:go_metalinter_autosave = 1

" Default: Set maximum time linters have to complete = "5s"
" let g:go_metalinter_deadline = "10s"

" Default: Treat comments above function as part of function = 1
" let g:go_textobj_include_function_doc = 0

" Default: Transform option for :GoAddTags or snippet expansion = 'snakecase'
" Available settings: snakecase, camelcase, lispcase, pascalcase, keep
let g:go_addtags_transform = 'camelcase'

" Default: Specify fold regions = ['import']
" Available settings: block, import, varconst, package_comment, comment
let g:go_fold_enable = []

" Default: Highlight struct and interface names = 0
let g:go_highlight_types = 1
" Default: Highlight struct field names = 0
let g:go_highlight_fields = 1
" Default: Highlight function and method declarations = 0
let g:go_highlight_functions = 1
" Default: Highlight function and method calls = 0
let g:go_highlight_function_calls = 1
" Default: Highlight operators such as := , ==, -=, etc = 0
let g:go_highlight_operators = 1
" Default: Highlight commonly used library types (io.Reader, etc.) = 0
let g:go_highlight_extra_types = 1
" Default: Highlight build constraints = 0
let g:go_highlight_build_constraints = 1
" Default: Highlight go:generate directives = 0
let g:go_highlight_generate_tags = 1
" Default: Highlight instances of tabs following spaces = 0
let g:go_highlight_space_tab_error = 1
" Default: Highlight white space after [] = 0
" let g:go_highlight_array_whitespace_error = 1
" Default: Highlight trailing white space = 0
let g:go_highlight_trailing_whitespace_error = 1
" Default: highlight printf-style formatting verbs inside string literals = 1
let g:go_highlight_format_strings = 0

" Run :GoBuild or :GoTestCompile based on the file name
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

augroup go
  autocmd!
  " Write file before :make, :GoBuild, :GoTest|Func, :GoRun
  autocmd FileType go set autowrite
  " go fmt uses tabs for indentation, ts and sw only affect viewer
  autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4
  " Enable Vim syntax highlighting for Go template files
  " Or add to files: {{/* vim: set filetype=gotexttmpl: */ -}}
  autocmd BufRead,BufNewFile *.gotmpl set filetype=gotexttmpl

  " Map quickfix (list) navigation
  autocmd FileType go nnoremap <silent> <C-j> :cnext<CR>
  autocmd FileType go nnoremap <silent> <C-k> :cprev<CR>
  autocmd FileType go nnoremap <silent> <C-c> :cclose<CR>

  autocmd FileType go nmap     <silent> <leader>gae <Plug>(go-alternate-edit)
  autocmd FileType go nnoremap <silent> <leader>gat :GoAddTags<CR>
  autocmd FileType go nmap     <silent> <leader>gb :<C-u>call <SID>build_go_files()<CR>
  autocmd FileType go nnoremap <silent> <leader>gcb :GoCoverageBrowser<CR>
  autocmd FileType go nmap     <silent> <leader>gct <Plug>(go-coverage-toggle)
  autocmd FileType go nnoremap <silent> <leader>gd :GoDecls<CR>
  autocmd FileType go nnoremap <silent> <leader>gdb :GoDebugStart<CR>
  autocmd FileType go nmap     <silent> <leader>gdc <Plug>(go-doc)
  autocmd FileType go nnoremap <silent> <leader>gdd :GoDeclsDir<CR>
  autocmd FileType go nmap     <silent> <leader>gde <Plug>(go-describe)
  autocmd FileType go nnoremap <silent> <leader>gdf :GoDef<CR>
  autocmd FileType go nmap     <silent> <leader>gdp <Plug>(go-deps)
  autocmd FileType go nnoremap <silent> <leader>gdr :GoDrop<CR>
  autocmd FileType go nmap     <silent> <leader>gds <Plug>(go-def-split)
  autocmd FileType go nmap     <silent> <leader>gdt <Plug>(go-def-tab)
  autocmd FileType go nmap     <silent> <leader>gdv <Plug>(go-def-vertical)
  autocmd FileType go nnoremap <silent> <leader>gec :GoErrCheck<CR>
  autocmd FileType go nmap     <silent> <leader>gf <Plug>(go-files)
  autocmd FileType go nnoremap <silent> <leader>gfs :GoFillStruct<CR>
  autocmd FileType go nmap     <silent> <leader>gfv <Plug>(go-freevars)
  autocmd FileType go nmap     <silent> <leader>gi <Plug>(go-install)
  autocmd FileType go nmap     <silent> <leader>gie <Plug>(go-iferr)
  autocmd FileType go nmap     <silent> <leader>gim <Plug>(go-imports)
  autocmd FileType go nmap     <silent> <leader>gin <Plug>(go-info)
  autocmd FileType go nmap     <silent> <leader>gip <Plug>(go-import)
  autocmd FileType go nnoremap <silent> <leader>gk :GoKeyify<CR>
  autocmd FileType go nmap     <silent> <leader>gl <Plug>(go-lint)
  autocmd FileType go nmap     <silent> <leader>gm <Plug>(go-metalinter)
  autocmd FileType go nnoremap <silent> <leader>gmp :GoImpl<CR>
  autocmd FileType go nmap     <silent> <leader>gms <Plug>(go-implements)
  autocmd FileType go nnoremap <silent> <leader>gp :GoPath<CR>
  autocmd FileType go nnoremap <silent> <leader>gpl :GoPlay<CR>
  autocmd FileType go nmap     <silent> <leader>gpt <Plug>(go-pointsto)
  autocmd FileType go nmap     <silent> <leader>gr <Plug>(go-run)
  autocmd FileType go nmap     <silent> <leader>gre <Plug>(go-rename)
  autocmd FileType go nmap     <silent> <leader>grf <Plug>(go-referrers)
  autocmd FileType go nnoremap <silent> <leader>grt :GoRemoveTags<CR>
  autocmd FileType go nnoremap <silent> <leader>gs :GoSameIdsToggle<CR>
  autocmd FileType go nmap     <silent> <leader>gt <Plug>(go-test)
  autocmd FileType go nmap     <silent> <leader>gtf <Plug>(go-test-func)
  autocmd FileType go nmap     <silent> <leader>gv <Plug>(go-vet)
  autocmd FileType go nnoremap <silent> <leader>gwe :GoWhicherrs<CR>

  " :GoAlternate between implementation/test code, like main.go and main_test.go
  autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
  autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabedit')

  " Shorter mappings for more common vim-go commands
  autocmd FileType go nmap     <silent> <leader>a :GoAddTags<CR>
  autocmd FileType go nmap     <silent> <leader>b :<C-u>call <SID>build_go_files()<CR>
  autocmd FileType go nmap     <silent> <leader>c <Plug>(go-coverage-toggle)
  autocmd FileType go nnoremap <silent> <leader>C :GoCoverageBrowser<CR>
  autocmd FileType go nmap     <silent> <leader>d :GoDebugStart<CR>
  autocmd FileType go nmap     <silent> <leader>D :GoDocBrowser<CR>
  autocmd FileType go nmap     <silent> <leader>e :UltiSnipsEdit<CR>
  autocmd FileType go nnoremap <silent> <leader>f :GoFillStruct<CR>
  autocmd FileType go nmap     <silent> <leader>i <Plug>(go-implements)
  autocmd FileType go nnoremap <silent> <leader>I :GoImpl<CR>
  autocmd FileType go nnoremap <silent> <leader>k :GoKeyify<CR>
  autocmd FileType go nmap     <silent> <leader>m <Plug>(go-metalinter)
  autocmd FileType go nmap     <silent> <leader>r <Plug>(go-run)
  autocmd FileType go nmap     <silent> <leader>R <Plug>(go-rename)
  autocmd FileType go nmap     <silent> <leader>s :FzfSnippets<CR>
  autocmd FileType go nmap     <silent> <leader>t <Plug>(go-test-func)

augroup END

"----------------------
" itchyny/lightline.vim
"----------------------
" https://github.com/itchyny/lightline.vim

" Default: Set when the last window will have a status line = 1
" Available settings 0: never
"                    1: only if there are at least two windows
"                    2: always
set laststatus=2

" Default: Show mode in status line = Vim: on / Vi: off
" Mode will be shown in lightline status
set noshowmode

" Default: Overriding default for left side but using default for right side
" Adding "%<" to " fileformat setting to compress long status lines from there
let g:lightline = {
  \ 'active': {
  \   'left': [ [ 'mode', 'paste', 'readonly' ],
  \             [ 'gitbranch', 'filename', 'modified' ], [ 'gostatus' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head',
  \ },
  \ 'component': {
  \   'gostatus': '%#goStatuslineColor#%{LightlineGo()}',
  \   'fileformat': '%<%{&ff}',
  \ },
  \ 'component_type': {
  \   'gostatus': 'raw',
  \ },
  \ }

" Define this function to get vim-go status in color, plus raw setting above
function! LightlineGo()
  return exists('*go#statusline#Show') ? go#statusline#Show() : ''
endfunction

"-----------------
" junegunn/fzf
"-----------------
" https://github.com/junegunn/fzf

" This plugin provides core functions and :FZF command used by fzf.vim plugin
" Default: Set position and size of fzf window = = { 'down': '~40%' }
" let g:fzf_layout = { 'down': '~50%' }

"-----------------
" junegunn/fzf.vim
"-----------------
" https://github.com/junegunn/fzf.vim

" Default: Set prefix for fzf command = empty
let g:fzf_command_prefix="Fzf"

" Use prefix in mapping of all of the fzf commands
noremap <leader>za :FzfAg<CR>
noremap <leader>zb :FzfBCommits<CR>
noremap <leader>zB :FzfBuffers<CR>
noremap <leader>zbl :FzfBLines<CR>
noremap <leader>zbt :FzfBTags<CR>
noremap <leader>zc :FzfCommits<CR>
noremap <leader>zC :FzfCommands<CR>
noremap <leader>zcl :FzfColors<CR>
noremap <leader>zf :FzfFiles<CR>
noremap <leader>zF :FzfFiletypes<CR>
noremap <leader>zg :FzfGFiles?<CR>
noremap <leader>zh :FzfHistory<CR>
noremap <leader>zH :FzfHelptags<CR>
noremap <leader>zl :FzfLines<CR>
noremap <leader>zL :FzfLocate<CR>
noremap <leader>zm :FzfMaps<CR>
noremap <leader>zM :FzfMarks<CR>
noremap <leader>zr :FzfRg<CR>
noremap <leader>zs :FzfSnippets<CR>
noremap <leader>zt :FzfTags<CR>
noremap <leader>zw :FzfWindows<CR>

" Default: Rg command - edit as needed to change preview specs
" The shellescape wraps the <q-args> in double quotes
" This allows commands like :Rg function foo
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" Set rg command to use in mapping below with included/excluded file types
let g:rg_command = '
  \ rg --column --line-number --no-heading --fixed-strings --ignore-case
  \ --no-ignore --hidden --follow --color "always"
  \ -g "*.{js,json,md,styl,html,config,py,cpp,c,go,hs,rb,conf}"
  \ -g "!{.git,node_modules,vendor}/*" '

" Example: F command mapping to call rg with the above options and supplied args
command! -bang -nargs=* F call fzf#vim#grep(g:rg_command .shellescape(<q-args>), 1, <bang>0)

"------------------
" majutsushi/tagbar
"------------------
" https://github.com/majutsushi/tagbar

" Default: Omit short help at top of the window = 0
let g:tagbar_compact = 1

" Default: Sort tags according to their name = 1
let g:tagbar_sort = 0

" Default: Move cursor to the Tagbar window when it is opened = 0
let g:tagbar_autofocus = 1

" Default: Set width of Tagbar window in characters = 40
let g:tagbar_width = 30

nmap <S-F10> :TagbarToggle<CR>

"--------------------
" scrooloose/nerdtree
"--------------------
" https://github.com/scrooloose/nerdtree-git-plugin

" Default: Display the bookmarks table = 0
let NERDTreeShowBookmarks=1
"
" Default: Specify which files to ignore = ['\~$']
let NERDTreeIgnore=['\\.swo$', '\\.swp$', '\\.git']

" Default: Set when to change the current working directory = 0
" Available settings 0: never change directory
"                    1: change when started with :NERDTree <dir>
"                    2: same as 1 plus when changing the tree root
"                    3: same as 2 plus when changing tabs
" let NERDTreeChDirMode=0
"
" Default: Set whether NERDTree window or bookmarks table closes after opening
"     file with NERDTree-o, NERDTree-i, NERDTree-t or NERDTree-T mappings = 0
" Available settings 0: no change
"                    1: closes after opening a file
"                    2: closes bookmark table after opening a bookmark
"                    3: same as both 1 and 2
let NERDTreeQuitOnOpen=1

" Default: Display hidden files = 0
let NERDTreeShowHidden=1

noremap <S-F8> :NERDTreeToggle<CR>
noremap <leader>nt :NERDTreeFind<CR>

"-----------------
" SirVer/ultisnips
"-----------------
" https://github.com/SirVer/ultisnips

" Uncomment and edit settings below to change behavior
" Default: Key used to expand a snippet = "<tab>"
" let g:UltiSnipsExpandTrigger="<tab>"

" Default: Key used to jump forward in a snippet = "<c-j>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"

" Default: Key used to jump backward in a snippet = "<c-k>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Default: Defines how the edit window is opened = "normal"
" Available settings: normal:     Opens in the current window
"                     tabdo:      Opens the window in a new tab
"                     horizontal: Splits the window horizontally
"                     vertical:   Splits the window vertically
"                     context:    Splits depending on context
let g:UltiSnipsEditSplit="vertical"

" Map UltiSnips open edit window
nmap <leader>se :UltiSnipsEdit<cr>
nmap <leader>sb :UltiSnipsEdit!<cr>

"-------------------
" tpope/vim-fugitive
"-------------------
" https://github.com/tpope/vim-fugitive

nnoremap <leader>G :Git!<Space>
nnoremap <leader>Ga :Git add .<CR>
nnoremap <leader>Gau :Git add --update<CR>
nnoremap <leader>Gb :Git blame<CR>
nnoremap <leader>Gco :Git checkout<CR>
nnoremap <leader>Gc :Git commit<CR>
nnoremap <leader>Gcn :Git commit -n<CR> " commit but ignore hooks
nnoremap <leader>Gd :Gdiff<CR>
nnoremap <leader>Gdo :Gdiffoff<CR>
nnoremap <leader>Ge :Gedit<CR>
nnoremap <leader>Ges :Gedit<Space>
nnoremap <leader>Gf :Git fetch<CR>
nnoremap <leader>Gg :silent Ggrep! <cword><CR>
nnoremap <leader>Gl :GV!<CR> " git log for the current file
nnoremap <leader>Glf :GV<CR> " full git log
nnoremap <leader>Gm :Gmove<Space>
nnoremap <leader>Gp :Git! push<CR>
nnoremap <leader>Gpf :Git push --force-with-lease<CR>
nnoremap <leader>Gpl :Git! pull<CR>
nnoremap <leader>Gr :Gread<CR>
nnoremap <leader>Grb :Git rebase -i master<CR>
nnoremap <leader>Grm :Gremove<CR>
nnoremap <leader>Gs :Git<CR>
nnoremap <leader>Gv :Gvdiff<CR>
nnoremap <leader>Gw :Gwrite<CR> " git add

"---------------
" wincent/ferret
"---------------
" https://github.com/wincent/ferret

" Default: Set args passed to underlying search = {}
let g:FerretExecutableArguments = {
  \'rg': '--smart-case --vimgrep --no-heading --no-config --max-columns 4096'}

" Default: Set up Ferret command mappings = 1
let g:FerretMap = 0

" Default: Highlight search pattern when running :Ack or :Lack = 0
let g:FerretHlsearch = 1

" Default: Pass the -w (word boundary) option to underlying search = 0
" let g:FerretAckWordWord = 1

" Default: Override settings for quickfix windows = 1
" These are various settings such as norelativenumber, nolist and nowrap
let g:FerretQFOptions = 0

" Map some Ferret commands
nmap <leader>fa <Plug>(FerretAck)
nmap <leader>fw <Plug>(FerretAckWord)
nmap <leader>fl <Plug>(FerretLack)
nmap <leader>fs <Plug>(FerretAcks)

"----------------------------
" Xuyuanp/nerdtree-git-plugin
"----------------------------
" https://github.com/Xuyuanp/nerdtree-git-plugin

" Default: NERDTree file status symbols = {
"  \ 'Modified'  : '✹',
"  \ 'Staged'    : '✚',
"  \ 'Untracked' : '✭',
"  \ 'Renamed'   : '➜',
"  \ 'Unmerged'  : '═',
"  \ 'Deleted'   : '✖',
"  \ 'Dirty'     : '✗',
"  \ 'Clean'     : '✔︎',
"  \ 'Ignored'   : '☒',
"  \ 'Unknown'   : '?'
"  \ }

" Override symbols with mnemonic characters
let g:NERDTreeGitStatusIndicatorMapCustom = {
  \ 'Modified'  : 'M',
  \ 'Staged'    : 'S',
  \ 'Untracked' : '*',
  \ 'Renamed'   : 'R',
  \ 'Unmerged'  : 'U',
  \ 'Deleted'   : '!',
  \ 'Dirty'     : 'D',
  \ 'Clean'     : 'C',
  \ 'Ignored'   : 'I',
  \ 'Unknown'   : '?'
\ }

" vim: filetype=vim
